
--- @class LuaDataType Lua数据类型枚举
--- @field Number string number类型
--- @field String string string类型
--- @field Nil string nil类型
--- @field Booean string boolean类型
--- @field Function string function类型
--- @field Table string table类型
--- @field UserData string userdata类型
--- @field Thread string thread类型
LuaDataType = {
    Number = "number",
    String = "string",
    Nil = "nil",
    Booean = "boolean",
    Function = "function",
    Table = "table",
    UserData = "userdata",
    Thread = "thread"
}
--- @class UnitType 元对象类型枚举
--- @field Unit Unit
--- @field Type Type
--- @field Instance Instance
UnitType = {
    Unit = "Unit",
    Type = "Type",
    Instance = "Instance"
}

---@class ClassType class类型
---@field Lua number 纯Lua
---@field CreateFirst number 需要先调用__createfirst创建实例对象
---@field ExtendCSInstance number 扩展CSharp实例
ClassType = {
    Lua = 0,
    CreateFirst = 1,
    ExtendCSInstance = 2
}
---@class Unit 元
---@field __unittype UnitType 元类型
---@field __super Unit 基类型                   __unittype = UnitType.Type 存在
---@field __classname string 类型名称           __unittype = UnitType.Type 存在
---@field __classtype ClassType 类型种类        __unittype = UnitType.Type 存在
---@field __firstcreate function 创建CS实例     __classtype = ClassType.CreateFirst &&  __unittype = UnitType.Type存在
---@field ctor function 构造函数 自动调用
---@field __type Unit 所属类型 ，是一个 {}       __unittype == UnitType.Instance 存在
---@field __object CS.Object CS 对象            __classtype = ClassType.ExtendCSInstance || __classtype = ClassType.CreateFirst 存在
Unit = {
    __unittype = UnitType.Unit,
    __super = nil,
    __classname = "Unit",
    __classtype = ClassType.Lua,
    __type = nil,
    __object = nil,
    __firstcreate = function(...)
    end,
    ctor = function(_, ...)
    end
}
---@param super string|Unit 名字或者一张由 class 创建出的表
---@return boolean @返回 true | false
function Unit:IsSubClassOf(super)
    --- @type Unit
    local _type = nil
    if self.__unittype == UnitType.Instance then
        _type = self.__type
    elseif self.__unittype == UnitType.Type then
        _type = self
    end
    --- @type string
    local classname
    if type(super) == LuaDataType.String then
        classname = super
    elseif type(super) == LuaDataType.Table then
        classname = super.__classname
    end
    local result = false
    local tmp = _type
    while tmp ~= nil do
        if tmp.__classname == classname then
            result = true
            break
        end
        tmp = tmp.__super
    end
    tmp = nil
    classname = nil
    return result
end

--深拷贝所有父类
local function CopySuper(instance, type)
    local tmp = type
    local supers = {}
    while tmp ~= nil do --假如类型不为null
        table.insert(supers, 1, tmp)--向上遍历父类插入到列表
        tmp = tmp.__super
    end
    for keysuper, superItem in pairs(supers) do --遍历父类列表复制值？？？
        for k, v in pairs(superItem) do
            if k ~= "__firstcreate" and k ~= "__unittype" then
                instance[k] = v
            end
        end
    end
    supers = nil
    return instance
end

---给实例添加功能元表
local function ExtendCSInstance(instace)
    instace.__unittype = UnitType.Instance
    local meta = {
        __call = function(_, ...) --实例不允许当函数
            error(_.__classname .. " is a instance extend from cs instance ")
        end,
        __index = function(_t, k) -- 这里为获取
            local selffield = rawget(_t, k) --获取自身键值
            if selffield then
                return selffield --不为nil返回
            else
                local fromcs = _t.__object[k] --__object 应该是 父类：C#的实例类
                if type(fromcs) == LuaDataType.Function then -- 假如字段是函数
                    return function(...) --!返回 匿名函数
                        local args = {...}
                        if next(args) then
                            local first = args[1]
                            if first == _t then --假如第一个参数是self则去除
                                table.remove(args, 1)
                            end
                        end
                        fromcs(_t.__object, table.unpack(args)) -- 被调用的方法
                    end
                else
                    return fromcs --不是函数，则直接返回字段
                end
            end
        end,
        __newindex = function(_t, k, v) -- 这里为写入
            local valuetype = type(v)
            if valuetype == LuaDataType.Function then -- 假如写入值是函数方法，直接重写
                rawset(_t, k, v)
            else
                if _t.__object[k] then --不是方法，则检测是否有这个字段键值
                    _t.__object[k] = v
                else --不存在这个字段键值
                    rawset(_t, k, v)
                end
            end
        end
    }
    setmetatable(instace, meta)
    --设置为实例的元表
    return instace
end

---调用type的ctor(instance,...)。ctor：构造函数
local function CallCtor(instance, type, ...)
    local ctorTable = {}
    local tmp = type
    while tmp ~= nil do --假如不为null则插入表内第一位
        table.insert(ctorTable, 1, tmp)
        tmp = tmp.__super
    end
    for k, v in pairs(ctorTable) do
        local ctor = rawget(v, "ctor")--查找构造函数
         --拿到type的ctor
        if ctor then --不为空则调用
            ctor(instance, ...)
        end
    end
    ctorTable = nil --释放
    return instance
end

---创建一个类
---@param classname string  类名
---@param super Unit|userdata|nil 父类
---@return Unit
class = function(classname, super)
    --classname必须为string,并且大于0 ，否则报错
    assert(type(classname) == LuaDataType.String and #classname > 0)

    ---父类类型
    local superType = type(super)

    ---判断是否是CS类
    local isCSharpType = super and superType == LuaDataType.Table and typeof(super)
    ---判断是否为CS实例
    local isCSharpInstance = super and superType == LuaDataType.UserData

    ---@type Unit
    local type = {}
    type.__unittype = UnitType.Type
    type.__classname = classname
    if isCSharpInstance and super.__classtype == ClassType.ExtendCSInstance then
        -- 不允许 多次扩展 一个C#的实例
        error('the super is not supported in the "class()" function,cannot extends a c# instance multiple times.')
    end

    if isCSharpInstance then --假如是实例
        -- 直接扩展一个C#的实例
        type.__classtype = ClassType.ExtendCSInstance
        type.__unittype = UnitType.Instance
        type.__type = Unit
        type.__object = super
        return ExtendCSInstance(type)
    elseif (isCSharpType and not super.__classtype) or superType == LuaDataType.Function then
        -- 通过传入C#类型的方式或者通过传入C#类创建函数的方式，继承C#的类，包括静态类
        type.__super = Unit --父类为基础元类型
        type.__unittype = UnitType.Type --元类型为"类型"
        type.__classtype = ClassType.CreateFirst --类类型为可创建：类似构造函数
        if not type.ctor then --假如不为空则设置匿名方法
            type.ctor = function(...)
            end
        end
        local meta = {
            __index = super,
            __call = function(_, ...)
                local object = _.__firstcreate(...)
                 --?获得的是C#的实例类
                local instance = {}
                instance.__object = object
                instance.__type = _ --?C#类型：构造函数
                instance.__unittype = UnitType.Instance --类型设定为实例
                return CallCtor(CopySuper(ExtendCSInstance(instance)), _, ...)
            end
        }
        --?假如是CS类 并且 父类的类型为f
        if isCSharpType and not super.__classtype then
            type.__firstcreate = function(...) --设置一个初始创建方法
                return super(...)
            end
        elseif superType == LuaDataType.Function then --假如父类是个C#构造方法
            --初始创建方法设置为C#构造方法
            type.__firstcreate = super 
        end
        setmetatable(type, meta)
        return type
    elseif super and super.__classtype == ClassType.CreateFirst then --假如父类是构造函数类
        -- 继承C#类
        type.__super = super
        type.__classtype = ClassType.CreateFirst
        type.__firstcreate = super.__firstcreate
        local meta = {
            __index = super
        }
        meta.__call = function(_, ...)
            local object = _.__firstcreate(...)
            local instance = {}
            instance.__object = object
            instance.__unittype = UnitType.Instance
            instance.__type = _
            return CallCtor(CopySuper(ExtendCSInstance(instance)), _, ...)
        end

        setmetatable(type, meta)
        return type
    else --纯lua
        type.__classtype = ClassType.Lua 
        local meta = {
            __call = function(_, ...)
                local instance = {}
                instance.__unittype = UnitType.Instance
                instance.__type = _
                setmetatable(
                    instance,
                    {
                        __index = _,
                        __call = function(_, ...)
                            error("this is a Instance of " .. _.__classname)
                        end
                    }
                )
                return CallCtor(instance, _, ...)
            end
        }
        if super == nil then --父类是否为null
            type.__super = Unit
            meta.__index = Unit
        else
            meta.__index = super
            type.__super = super
        end
        setmetatable(type, meta)
        return type
    end
end

------------------------------------------------------------------------------
_G.DefineTable = {}
_G.UsingTable = {}
_G.UsingStaticTable = {}
---锁住 _G
function Lock_G()
    if _G.__locked then
        return
    end
    local meta = {}
    meta.__newindex = function(_, k, v)
        error("attempt to add a new value to global,key: " .. k, 2)
    end

    meta.__index = function(_, k)
        return rawget(_, k) or rawget(_.DefineTable, k) or rawget(_.UsingStaticTable, k) or rawget(_.UsingTable, k)
    end

    _G.__locked = true
    setmetatable(_G, meta)
end

--- 定义全局变量
--- @param name string 名字
--- @param value any 值
--- @return any value
function Define(name, value)
    rawset(_G.DefineTable, name, value)
    return value
end

-- 是否定义全局变量
--- @param name string 名字
--- @return boolean,any
function IsDefine(name)
    local result = rawget(_G.DefineTable, name)
    return result ~= nil, result
end

local function LoadCSType(name)
    return load("return CS." .. name)()
end

-- C# 调用方法
-- Using("UnityEngine.KeyCode")
-- print(KeyCode.Space)
--- @param classname string 类型名称
--- @param variant string 变体，用于处理名字冲突
--- @return CS.Type
function Using(classname, variant)
    if not variant then
        local a, b, c = string.find(classname, "[^%s]+%.([^%s]+)")
        if c then
            variant = c
        else
            variant = classname
        end
    end
    local _target = rawget(_G.UsingTable, variant)
    if _target == nil then
        _target = LoadCSType(classname)
        rawset(_G.UsingTable, variant, _target)
    end
    return _target
end

-- C# 调用方法
-- local KeyCode= Using("UnityEngine.KeyCode")
-- print(KeyCode.Space)
--- @param classname string 类型名称
--- @return CS.Type
function StaticUsing(classname)
    local _target = rawget(_G.UsingStaticTable, classname)
    if _target == nil then
        _target = LoadCSType(classname)
        rawset(_G.UsingStaticTable, classname, _target)
    end
    return _target
end

-- 生成方法句柄
--- @param method function 类型名称
--- @return function
function Handler(method, ...)
    local args = {...}
    if next(args) then
        return function(...)
            local args2 = {...}
            if next(args2) then
                for i = #args, 1, -1 do
                    table.insert(args2, 1, args[i])
                end
                return method(table.unpack(args2))
            else
                return method(table.unpack(args))
            end
        end
    else
        return function(...)
            return method(...)
        end
    end
end

---@class TryBlock
---@field main function
---@field catch function
---@field finally function
---C# try
---@param block TryBlock
function try(block)
    local main = block[1]
    local catch = block.catch
    local finally = block.finally

    local results = table.pack(pcall(main))
    local status = results[1]
    local e = results[2]
    table.remove(results, 1)
    local result = results
    local catched = false
    if (not status) and catch and type(catch) == LuaDataType.Function then
        catched = true
        local results = table.pack(pcall(catch, e))
        if results[1] then
            table.remove(results, 1)
            result = results
            e = nil
        else
            e = results[2]
        end
    end

    if finally and type(finally) == LuaDataType.Function then
        pcall(finally)
    end

    if status then
        return table.unpack(result)
    elseif catched then
        if not e then
            return table.unpack(result)
        else
            error(e)
        end
    else
        error(e)
    end
end